import { Skeleton, Table } from '@mantine/core';
import { ReactNode, useEffect } from 'react';

import { DEBUG } from '@/shared/api';

import { GenericError } from '@/shared/lib/fetch';
import { ErrorHandler } from '../alert/error-handler/error.ui';

interface IProperties {
  isLoading: boolean;
  tableHead?: { [key: string]: string | number }[];
  children: ReactNode;
  error: GenericError<never> | null | undefined;
  // –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  empty: boolean | undefined;
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
 * –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 * –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª–æ–∂–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –∏ —Ç.–¥. –≤—ã–≤–æ–¥–∏–ª–∏—Å—å –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã –∞ –Ω–µ –≤–º–µ—Å—Ç–æ –Ω–µ–µ
 * @param properties { children, isLoading, tableHead, empty, error }
 * @returns —Ç–∞–±–ª–∏—Ü—É, —Å–ø–∏–Ω–Ω–µ—Ä, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –æ—à–∏–±–∫—É
 */
export function TableData(properties: Readonly<IProperties>) {
  const { children, error, isLoading, tableHead, empty } = properties;

  const isDataHead = tableHead && tableHead.length > 0;

  const tableEmpty = (
    <Table.Tr>
      <Table.Td colSpan={tableHead?.length} bg="var(--mantine-color-gray-light)">
        ü§î –î–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É
      </Table.Td>
    </Table.Tr>
  );

  const error_ = error ? (
    <Table.Tr>
      <Table.Td colSpan={tableHead?.length} p={0}>
        <ErrorHandler error={error} />
      </Table.Td>
    </Table.Tr>
  ) : undefined;

  const head = isDataHead ? (
    <Table.Thead>
      <Table.Tr>
        {tableHead.map((element) => (
          <Table.Th key={element.id} w={element.w}>
            {element.name}
          </Table.Th>
        ))}
      </Table.Tr>
    </Table.Thead>
  ) : undefined;

  const spinnerTd =
    isLoading &&
    isDataHead &&
    tableHead.map((element) => (
      <Table.Td key={element.id} py="xl">
        <Skeleton height={8} radius="xl" />
      </Table.Td>
    ));

  const spinner = isLoading && isDataHead && (
    <>
      <Table.Tr>{spinnerTd}</Table.Tr>
      <Table.Tr>{spinnerTd}</Table.Tr>
      <Table.Tr>{spinnerTd}</Table.Tr>
    </>
  );

  /**
   * –ü–æ–º–æ—â–Ω–∏–∫, —á—Ç–æ–±—ã —á–∏—Å–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å —á–∏—Å–ª–æ–º —è—á–µ–µ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
   * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
   * Colspan –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ö–æ—Ä–æ—à–æ
   */
  useEffect(() => {
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param referenceNode —ç–ª–µ–º–µ–Ω—Ç
     * @param newNode —ç–ª–µ–º–µ–Ω—Ç
     */
    function insertAfter(referenceNode: HTMLTableElement | null, newNode: Node) {
      referenceNode?.parentNode?.insertBefore(newNode, referenceNode.nextSibling);
    }
    if (DEBUG) {
      setTimeout(() => {
        const td = document.querySelectorAll('tbody > tr:first-child > .mantine-Table-td');

        if (tableHead?.length !== td.length && !document.querySelector('[data-mute-note]')) {
          const table = document.querySelector('table');

          const element = document.createElement('span');
          element.dataset.muteNote = '';
          element.setAttribute('style', 'color: red');
          element.innerHTML = 'üò± –ß–∏—Å–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';

          insertAfter(table, element);
        }
      }, 1000);
    }
  }, [tableHead]);

  return (
    <Table horizontalSpacing="md" verticalSpacing="md" highlightOnHover>
      {head}
      <Table.Tbody>
        {isLoading && spinner}
        {empty ? tableEmpty : children}
        {error && error_}
      </Table.Tbody>
    </Table>
  );
}
