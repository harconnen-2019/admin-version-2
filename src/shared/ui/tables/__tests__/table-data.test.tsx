import { render, screen } from '@test-utils';
import { describe, it } from 'vitest';

import { Table } from '@mantine/core';
import { TableData } from '../table-data';

const head = [
  { id: 1, name: 'ID', w: 50 },
  { id: 2, name: '–°–æ–∑–¥–∞–Ω–∞', w: 170 },
  { id: 3, name: '–ò–∑–º–µ–Ω–µ–Ω–∞', w: 170 },
  { id: 4, name: ' ', w: 50 },
];

const rows = [1, 2, 3, 4];

describe('–¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö', () => {
  it('–ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞, –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —Ç—Ä–∏ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ', () => {
    const { container } = render(
      <TableData isLoading={true} error={undefined} tableHead={head} empty={undefined}>
        <Table.Tr>
          <Table.Td>1</Table.Td>
        </Table.Tr>
      </TableData>,
    );

    // eslint-disable-next-line testing-library/no-container, testing-library/no-node-access
    const result = container.querySelectorAll('.mantine-Skeleton-root');

    expect(result).toHaveLength(head.length * 3);
  });

  it('–°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, "colSpan" —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤', () => {
    render(
      <TableData isLoading={false} error={undefined} tableHead={head} empty={true}>
        <Table.Tr>
          {rows.map((element) => (
            <Table.Td key={element}>{element}</Table.Td>
          ))}
        </Table.Tr>
      </TableData>,
    );

    const result = screen.getByRole('cell', {
      name: /ü§î –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É/i,
    });

    expect(result).toBeInTheDocument();
    expect(result).toHaveAttribute('colSpan', '4');
  });

  it('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, "colSpan" —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤', () => {
    const error = new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');

    render(
      <TableData isLoading={false} error={error} tableHead={head} empty={undefined}>
        <Table.Tr>
          <Table.Td>1</Table.Td>
        </Table.Tr>
      </TableData>,
    );

    const tableTd = screen.getByRole('cell', {
      name: /–æ—à–∏–±–∫–∞/i,
    });
    const result = screen.getByText(error.message);

    expect(result).toBeInTheDocument();
    expect(tableTd).toHaveAttribute('colSpan', '4');
  });

  it('–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö "children" –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã', () => {
    render(
      <TableData isLoading={false} error={undefined} tableHead={head} empty={undefined}>
        <Table.Tr>
          <Table.Td colSpan={4}>–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö</Table.Td>
        </Table.Tr>
      </TableData>,
    );

    const result = screen.getByText(/–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö/);

    expect(result).toBeInTheDocument();
  });

  it('–ù–µ –ø—Ä–∏—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è, –æ—à–∏–±–∫–∏ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ', () => {
    render(
      <TableData isLoading={false} error={undefined} tableHead={undefined} empty={undefined}>
        <Table.Tr>
          <Table.Td colSpan={4}>–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö</Table.Td>
        </Table.Tr>
      </TableData>,
    );

    const table = screen.getByRole('table');
    const result = screen.queryByText(/ID/);
    const text = screen.getByText(/–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö/);

    expect(table).toBeInTheDocument();
    expect(result).not.toBeInTheDocument();
    expect(text).toBeInTheDocument();
  });
});
